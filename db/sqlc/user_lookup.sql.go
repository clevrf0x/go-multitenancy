// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_lookup.sql

package db_sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUserLookup = `-- name: CreateUserLookup :one
INSERT INTO user_lookup (tenant_id, email) VALUES ($1, $2) RETURNING id, tenant_id, email
`

type CreateUserLookupParams struct {
	TenantID uuid.UUID
	Email    string
}

func (q *Queries) CreateUserLookup(ctx context.Context, arg CreateUserLookupParams) (UserLookup, error) {
	row := q.db.QueryRowContext(ctx, createUserLookup, arg.TenantID, arg.Email)
	var i UserLookup
	err := row.Scan(&i.ID, &i.TenantID, &i.Email)
	return i, err
}

const deleteUserLookupByTenantAndEmail = `-- name: DeleteUserLookupByTenantAndEmail :exec
DELETE FROM user_lookup
WHERE tenant_id = $1 AND email = $2
`

type DeleteUserLookupByTenantAndEmailParams struct {
	TenantID uuid.UUID
	Email    string
}

func (q *Queries) DeleteUserLookupByTenantAndEmail(ctx context.Context, arg DeleteUserLookupByTenantAndEmailParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserLookupByTenantAndEmail, arg.TenantID, arg.Email)
	return err
}

const getUserLookupByEmail = `-- name: GetUserLookupByEmail :one
SELECT id, tenant_id, email FROM user_lookup WHERE email = $1
`

func (q *Queries) GetUserLookupByEmail(ctx context.Context, email string) (UserLookup, error) {
	row := q.db.QueryRowContext(ctx, getUserLookupByEmail, email)
	var i UserLookup
	err := row.Scan(&i.ID, &i.TenantID, &i.Email)
	return i, err
}

const getUserLookupsByTenant = `-- name: GetUserLookupsByTenant :many
SELECT id, tenant_id, email FROM user_lookup WHERE tenant_id = $1
`

func (q *Queries) GetUserLookupsByTenant(ctx context.Context, tenantID uuid.UUID) ([]UserLookup, error) {
	rows, err := q.db.QueryContext(ctx, getUserLookupsByTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserLookup
	for rows.Next() {
		var i UserLookup
		if err := rows.Scan(&i.ID, &i.TenantID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
