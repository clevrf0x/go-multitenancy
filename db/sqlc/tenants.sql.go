// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tenants.sql

package db_sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (id, name, workspace) VALUES ($1, $2, $3)
RETURNING id, name, workspace, created_at, updated_at
`

type CreateTenantParams struct {
	ID        uuid.UUID
	Name      string
	Workspace string
}

type CreateTenantRow struct {
	ID        uuid.UUID
	Name      string
	Workspace string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (CreateTenantRow, error) {
	row := q.db.QueryRowContext(ctx, createTenant, arg.ID, arg.Name, arg.Workspace)
	var i CreateTenantRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Workspace,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantByID = `-- name: GetTenantByID :one
SELECT id, name, description, logo, workspace, created_at, updated_at, deleted_at FROM tenants WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTenantByID(ctx context.Context, id uuid.UUID) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantByID, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Logo,
		&i.Workspace,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTenantByWorkspace = `-- name: GetTenantByWorkspace :one
SELECT id, name, description, logo, workspace, created_at, updated_at, deleted_at FROM tenants WHERE workspace = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTenantByWorkspace(ctx context.Context, workspace string) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantByWorkspace, workspace)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Logo,
		&i.Workspace,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAllTenants = `-- name: ListAllTenants :many
SELECT id, name, workspace, created_at, updated_at FROM tenants WHERE deleted_at IS NULL
`

type ListAllTenantsRow struct {
	ID        uuid.UUID
	Name      string
	Workspace string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListAllTenants(ctx context.Context) ([]ListAllTenantsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllTenantsRow
	for rows.Next() {
		var i ListAllTenantsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Workspace,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteTenant = `-- name: SoftDeleteTenant :exec
UPDATE tenants
SET 
    deleted_at = (NOW() AT TIME ZONE 'UTC'),
    updated_at = (NOW() AT TIME ZONE 'UTC')
WHERE 
    id = $1
    AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteTenant(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeleteTenant, id)
	return err
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE tenants
SET 
    name = COALESCE($2, name),
    description = COALESCE($3, description),
    logo = COALESCE($4, logo),
    updated_at = (NOW() AT TIME ZONE 'UTC')
WHERE 
    id = $1
    AND deleted_at IS NULL
RETURNING id, name, description, logo, workspace, created_at, updated_at, deleted_at
`

type UpdateTenantParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Logo        uuid.NullUUID
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, updateTenant,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Logo,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Logo,
		&i.Workspace,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
