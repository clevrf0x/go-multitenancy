// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: public_files.sql

package db_sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPublicFile = `-- name: CreatePublicFile :one
INSERT INTO files (
    name,
    path
) VALUES (
    $1, $2
)
RETURNING id, name, path, created_at, updated_at
`

type CreatePublicFileParams struct {
	Name string
	Path string
}

type CreatePublicFileRow struct {
	ID        uuid.UUID
	Name      string
	Path      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreatePublicFile(ctx context.Context, arg CreatePublicFileParams) (CreatePublicFileRow, error) {
	row := q.db.QueryRowContext(ctx, createPublicFile, arg.Name, arg.Path)
	var i CreatePublicFileRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPublicFileByID = `-- name: GetPublicFileByID :one
SELECT id, name, path, created_at, updated_at 
FROM files
WHERE id = $1 
  AND deleted_at IS NULL
`

type GetPublicFileByIDRow struct {
	ID        uuid.UUID
	Name      string
	Path      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetPublicFileByID(ctx context.Context, id uuid.UUID) (GetPublicFileByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPublicFileByID, id)
	var i GetPublicFileByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const softDeletePublicFile = `-- name: SoftDeletePublicFile :exec
UPDATE files
SET 
    deleted_at = (NOW() AT TIME ZONE 'UTC'),
    updated_at = (NOW() AT TIME ZONE 'UTC')
WHERE 
    id = $1
    AND deleted_at IS NULL
`

func (q *Queries) SoftDeletePublicFile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeletePublicFile, id)
	return err
}

const updatePublicFile = `-- name: UpdatePublicFile :one
UPDATE files
SET 
    name = COALESCE($2, name),
    path = COALESCE($3, path),
    updated_at = (NOW() AT TIME ZONE 'UTC')
WHERE 
    id = $1
    AND deleted_at IS NULL
RETURNING id, name, path, created_at, updated_at
`

type UpdatePublicFileParams struct {
	ID   uuid.UUID
	Name string
	Path string
}

type UpdatePublicFileRow struct {
	ID        uuid.UUID
	Name      string
	Path      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) UpdatePublicFile(ctx context.Context, arg UpdatePublicFileParams) (UpdatePublicFileRow, error) {
	row := q.db.QueryRowContext(ctx, updatePublicFile, arg.ID, arg.Name, arg.Path)
	var i UpdatePublicFileRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
