// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tenant_files.sql

package db_sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTenantFile = `-- name: CreateTenantFile :one
INSERT INTO tenant_files (
    name,
    path
) VALUES (
    $1, $2
)
RETURNING id, name, path, created_at, updated_at
`

type CreateTenantFileParams struct {
	Name string
	Path string
}

type CreateTenantFileRow struct {
	ID        uuid.UUID
	Name      string
	Path      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateTenantFile(ctx context.Context, arg CreateTenantFileParams) (CreateTenantFileRow, error) {
	row := q.db.QueryRowContext(ctx, createTenantFile, arg.Name, arg.Path)
	var i CreateTenantFileRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantFileByID = `-- name: GetTenantFileByID :one
SELECT id, name, path, created_at, updated_at
FROM tenant_files
WHERE id = $1
  AND deleted_at IS NULL
`

type GetTenantFileByIDRow struct {
	ID        uuid.UUID
	Name      string
	Path      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetTenantFileByID(ctx context.Context, id uuid.UUID) (GetTenantFileByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTenantFileByID, id)
	var i GetTenantFileByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const softDeleteTenantFile = `-- name: SoftDeleteTenantFile :exec
UPDATE tenant_files
SET 
    deleted_at = (NOW() AT TIME ZONE 'UTC'),
    updated_at = (NOW() AT TIME ZONE 'UTC')
WHERE 
    id = $1
    AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteTenantFile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeleteTenantFile, id)
	return err
}

const updateTenantFile = `-- name: UpdateTenantFile :one
UPDATE tenant_files
SET 
    name = COALESCE($2, name),
    path = COALESCE($3, path),
    updated_at = (NOW() AT TIME ZONE 'UTC')
WHERE 
    id = $1
    AND deleted_at IS NULL
RETURNING id, name, path, created_at, updated_at
`

type UpdateTenantFileParams struct {
	ID   uuid.UUID
	Name string
	Path string
}

type UpdateTenantFileRow struct {
	ID        uuid.UUID
	Name      string
	Path      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) UpdateTenantFile(ctx context.Context, arg UpdateTenantFileParams) (UpdateTenantFileRow, error) {
	row := q.db.QueryRowContext(ctx, updateTenantFile, arg.ID, arg.Name, arg.Path)
	var i UpdateTenantFileRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
